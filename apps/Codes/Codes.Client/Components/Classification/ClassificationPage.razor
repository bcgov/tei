@page "/"
@inject IClassificationFilterService FilterService
@using TEI.Codes.Client.Components.Classification.Input
@using TEI.Codes.Client.Components.Classification.Output
@using TEI.Codes.Client.Models.Classification
@using TEI.Codes.Client.Services
@using TEI.Codes.Data.Models
@inherits ComponentBase

<PageTitle>Biogeoclimatic Ecosystem Classification</PageTitle>

<div class="mb-4 d-grid gap-2 align-content-start">
    <div class="row g-0 mb-2 mb-sm-1">
        <div class="col col-sm-4 col-xl-6">
            <h4 class="mb-0">Filters</h4>
        </div>
        <div class="col col-sm-8 col-xl-6">
            <div class="d-grid gap-3 gap-sm-3 d-sm-flex justify-content-sm-end">
                <button type="button"
                        @onclick="ClearAllFilters"
                        class="btn btn-secondary btn-sm flex-fill"
                        disabled="@(FilterService.FiltersAreEmpty || FilterService.Loading)">
                    <img src="/lib/bootstrap/icons/x-circle.svg"
                         alt=""
                         aria-hidden="true"
                         width="16"
                         height="16" />
                    Reset
                </button>
                <button type="button"
                        @onclick="RestorePreviousFilter"
                        class="btn btn-secondary btn-sm flex-fill"
                        disabled="@(FilterService.FiltersAreEmpty || FilterService.Loading || FilterService.HistoryIsEmpty)"
                        aria-label="Restore previous filter">
                    <img src="/lib/bootstrap/icons/arrow-left.svg"
                         alt=""
                         aria-hidden="true"
                         width="16"
                         height="16" />
                    Back
                </button>
            </div>
        </div>
    </div>
    <div class="row g-3">
        @foreach (InputFieldNode node in InputFieldNodes)
        {
            <InputFieldNodeComponent
                Node="@node"
                OnSelectCallback="FilterResultsAsync"
                Deactivated="@(FilterResponse == null || FilterService.Loading)" />
        }
    </div>
</div>

<h4 class="mb-2">
    @if (FilterService.Loading)
    {
        <span class="spinner-border"
              role="status"></span>
        <em>Loading... </em>
    }
    else if (FilterResponse?.UniqueResult != null)
    {
        <text>Result</text>
    }
    else if (FilterResponse?.ResultPreviews != null)
    {
        <text>Results (@ResultText)</text>
    }
    else
    {
        <div class="text-danger">
            Unable to retrieve data.
            <a href=""
               @onclick="@FilterResultsAsync"
               @onclick:preventDefault>Retry</a>
        </div>
    }
</h4>

@if (!FilterService.Loading)
{
    @if (FilterResponse?.UniqueResult != null)
    {
        <div class="row g-3">
            @foreach (OutputFieldNode node in OutputFieldNodes)
            {
                <OutputFieldNodeComponent
                    Node="@node" />
            }
        </div>
    }
    else if (FilterResponse != null)
    {
        <div class="card overflow-auto result-table">
            <div class="card-body p-0">
                <table class="table table-striped table-hover mb-0">
                    <thead>
                    <tr>
                        <th scope="col">BGC Label</th>
                        <th scope="col">BGC Detail</th>
                        <th scope="col">Zone Detail</th>
                        <th scope="col">Ecosystem Code</th>
                        <th scope="col">Site Series Name</th>
                        <th scope="col">Source</th>
                        <th scope="col">Approved</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (ResultPreview preview in FilterResponse.ResultPreviews)
                    {
                        <tr role="button"
                            @onclick="() => FilterService.FilterToResultAsync(preview)">
                            <td>@preview.BgcLabel</td>
                            <td>@preview.BgcDetail</td>
                            <td>@preview.ZoneDetail</td>
                            <td>@preview.EcosystemCode</td>
                            <td>@preview.SiteSeriesName</td>
                            <td>@preview.Source</td>
                            <td>@preview.Approved.ToString()</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
}

@code {

    private FilterBcgEcoCodesResponse? FilterResponse => FilterService.FilterResponse?.Data;
    private int TotalResultCount => FilterService.FilterResponse?.TotalCount ?? 0;

    private string ResultText
    {
        get
        {
            string totalText = $"{TotalResultCount} matching record{(TotalResultCount == 1 ? "" : "s")}";
            if (FilterResponse?.ResultPreviews.Count == TotalResultCount)
            {
                return totalText;
            }

            return $"first {FilterResponse?.ResultPreviews.Count} of {totalText}";
        }
    }

    private IList<InputFieldNode> InputFieldNodes { get; set; } = [];
    private IList<OutputFieldNode> OutputFieldNodes { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        InputFieldNodes = GenerateInputNodes();
        OutputFieldNodes = GenerateOutputNodes();
        await FilterResultsAsync();
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Organizes input fields into a hierarchical structure to control their size and positioning in the UI.
    /// </summary>
    private IList<InputFieldNode> GenerateInputNodes()
    {
        return
        [
            new(
            [
                new(
                [
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.BgcLabel]) { XsWidth = 12, MdWidth = 12 },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Zone]) { XsWidth = 12, MdWidth = 12 },
                ]),
                new(
                [
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Subzone]) { FloatingLabel = true, XsWidth = null, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Variant]) { FloatingLabel = true, XsWidth = null, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Phase]) { FloatingLabel = true, XsWidth = null, MdWidth = null, XlWidth = null },
                ]),
            ]) { Label = "BGC Label" },
            new(
            [
                new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.EcosystemCode]),
                new(
                [
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.MapCode]) { FloatingLabel = true, XsWidth = 6, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.SiteSeries]) { FloatingLabel = true, XsWidth = 6, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.SsPhase]) { FloatingLabel = true, XsWidth = 4, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Seral]) { FloatingLabel = true, XsWidth = 4, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Variation]) { FloatingLabel = true, XsWidth = 4, MdWidth = null, XlWidth = null },
                ]) { XlWidth = 6 },
            ]) { Label = "Ecosystem Code" },
            new(
            [
                new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.SiteComponentCode]) { XlWidth = 6 },
                new(
                [
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Realm]) { FloatingLabel = true, XsWidth = 6, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Group]) { FloatingLabel = true, XsWidth = 6, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Class]) { FloatingLabel = true, XsWidth = 4, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Association]) { FloatingLabel = true, XsWidth = 4, MdWidth = null, XlWidth = null },
                    new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Subclass]) { FloatingLabel = true, XsWidth = 4, MdWidth = null, XlWidth = null },
                ]) { XlWidth = 6 },
            ]) { Label = "Site Component Code" },
            new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.NbecCode]) { XlWidth = 4 },
            new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.SiteSeriesName]) { XlWidth = 8 },
            new(
            [
                new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.EcosystemType]) { XlWidth = 4 },
                new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.EcosystemSubtype]) { XlWidth = 4 },
                new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.KindType]) { XlWidth = 4 },
            ]) { MdWidth = 8 },
            new(
            [
                new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Forested]) { XlWidth = 4 },
                new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Source]) { XlWidth = 4 },
                new InputFieldLeafNode(FilterService.InputFields[ClassificationFieldType.Approved]) { XlWidth = 4 },
            ]) { MdWidth = 4 },
        ];
    }

    /// <summary>
    /// Organizes output fields into a hierarchical structure to control their size and positioning in the UI.
    /// </summary>
    private IList<OutputFieldNode> GenerateOutputNodes()
    {
        return
        [
            new(
            [
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.BgcLabel]) { XsWidth = 12, XlWidth = 5 },
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Zone]) { XsWidth = 12, XlWidth = 4 },
                new(
                [
                    new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Subzone]) { XsWidth = null },
                    new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Variant]) { XsWidth = null },
                    new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Phase]) { XsWidth = null },
                ]) { XlWidth = 3 },
            ]) { Label = "BGC Label" },
            new(
            [
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.EcosystemCode]) { XsWidth = null },
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.MapCode]) { XsWidth = 12, MdWidth = 5, XlWidth = 4 },
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.SiteSeries]) { XsWidth = null },
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.SsPhase]) { XsWidth = null },
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Seral]) { XsWidth = null },
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Variation]) { XsWidth = null },
            ]) { Label = "Ecosystem Code" },
            new(
            [
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.SiteComponentCode]),
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Realm]),
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Group]),
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Class]),
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Association]),
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Subclass]),
            ]) { Label = "Site Component Code" },
            new(
            [
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.NbecCode]) { XsWidth = 4, MdWidth = 4, XlWidth = 2 },
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.DateAdded]) { XsWidth = 4, MdWidth = 4, XlWidth = 2 },
                new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.SiteSeriesName]) { XsWidth = 12, MdWidth = 12, XlWidth = 8 },
                new(
                [
                    new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.EcosystemType]) { XsWidth = null },
                    new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.EcosystemSubtype]) { XsWidth = null },
                    new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.KindType]) { XsWidth = null },
                ]) { XsWidth = 12, MdWidth = 12, XlWidth = 6 },
                new(
                [
                    new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Forested]) { XsWidth = null },
                    new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Source]) { XsWidth = null },
                    new OutputFieldLeafNode(FilterService.OutputFields[ClassificationFieldType.Approved]) { XsWidth = null },
                ]) { XsWidth = 12, MdWidth = 12, XlWidth = 6 },
            ]) { Label = "Additional Information" },
        ];
    }

    private async Task FilterResultsAsync()
    {
        await FilterService.FilterResultsAsync();
        StateHasChanged();
    }

    private void ClearAllFilters()
    {
        FilterService.ClearAllFilters();
    }

    private void RestorePreviousFilter()
    {
        FilterService.RestorePreviousFilter();
    }

}
