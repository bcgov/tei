@page "/"
@inject ILogger<ClassificationPage> Logger
@inject IClassificationApi ClassificationApi
@using TEI.Codes.Client.Api
@using TEI.Codes.Data
@inherits ComponentBase

<PageTitle>Biogeoclimatic Ecosystem Classification</PageTitle>

<h1>Biogeoclimatic Ecosystem Classification</h1>

@if (Loading)
{
    <p>
        <span class="spinner-border spinner-border-sm"
              role="status"></span>
        <em>Loading... </em>
    </p>
}
else if (FilterResponse?.ResultCount != null)
{
    <p>@FilterResponse.ResultCount matching record@(FilterResponse.ResultCount == 1 ? "" : "s").</p>
}
else
{
    <p class="text-danger">
        Unable to retrieve data.
        <a href=""
           @onclick="@FilterResultsAsync"
           @onclick:preventDefault>Retry</a>
    </p>
}

<div class="row gy-3">
    <div class="col-12 col-xl-6 d-grid gap-2 align-content-start">
        <h4>Filters</h4>
        <div class="d-flex gap-2">
            <button type="button"
                    @onclick="ClearAllFilters"
                    class="btn btn-secondary btn-sm flex-fill"
                    disabled="@(FiltersAreEmpty || Loading)">
                <img src="/lib/bootstrap/icons/x-circle.svg"
                     alt=""
                     aria-hidden="true"
                     width="16"
                     height="16" />
                Reset
            </button>
            <button type="button"
                    @onclick="RestorePreviousFilter"
                    class="btn btn-secondary btn-sm flex-fill"
                    disabled="@FiltersAreEmpty"
                    aria-label="Restore previous filter">
                <img src="/lib/bootstrap/icons/arrow-left.svg"
                     alt=""
                     aria-hidden="true"
                     width="16"
                     height="16" />
                Back
            </button>
        </div>
        @foreach (SelectField field in SelectFields)
        {
            <SelectFieldComponent
                Field="@field"
                OnSelectCallback="FilterResultsAsync"
                Deactivated="@(FilterResponse == null || Loading)" />
        }
    </div>
    <div class="col d-grid gap-2">
        <h4>Result</h4>
        @foreach (List<OutputField> group in OutputFieldGroups)
        {
            <div class="card">
                <div class="card-body row gy-2">
                    @foreach (OutputField field in group)
                    {
                        <OutputFieldComponent
                            Field="@field" />
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {

    private FilterBcgEcoCodesResponse? filterResponse;

    private FilterBcgEcoCodesResponse? FilterResponse
    {
        get => filterResponse;

        set
        {
            filterResponse = value;
            UpdateInputFields(value);
            UpdateOutputFields(value);
        }
    }

    private Stack<FilterBcgEcoCodes> FilterHistory { get; } = new();

    private bool Loading { get; set; }

    private List<SelectField> SelectFields { get; } =
    [
        new("BGC Label", response => response?.BgcCodeValues ?? [], (request, value) => request.BgcCode = value, request => request.BgcCode)
        {
            Subfields =
            [
                new("Zone", response => response?.ZoneCodeValues ?? [], (request, value) => request.ZoneCode = value, request => request.ZoneCode),
                new("Subzone", response => response?.SubzoneCodeValues ?? [], (request, value) => request.SubzoneCode = value, request => request.SubzoneCode),
                new("Variant", response => response?.VariantCodeValues ?? [], (request, value) => request.VariantCode = value, request => request.VariantCode),
                new("Phase", response => response?.PhaseCodeValues ?? [], (request, value) => request.PhaseCode = value, request => request.PhaseCode),
            ],
        },
        new("Ecosystem Code", response => response?.EcosystemCodeValues ?? [], (request, value) => request.EcosystemCode = value, request => request.EcosystemCode)
        {
            Subfields =
            [
                new("Map Code", response => response?.MapCodeValues ?? [], (request, value) => request.MapCode = value, request => request.MapCode),
                new("Site Series", response => response?.SiteSeriesCodeValues ?? [], (request, value) => request.SiteSeriesCode = value, request => request.SiteSeriesCode),
                new("SS Phase", response => response?.SsPhaseCodeValues ?? [], (request, value) => request.SsPhaseCode = value, request => request.SsPhaseCode),
                new("Seral", response => response?.SeralCodeValues ?? [], (request, value) => request.SeralCode = value, request => request.SeralCode),
                new("Variation", response => response?.VariationCodeValues ?? [], (request, value) => request.VariationCode = value, request => request.VariationCode),
            ],
        },
        new("nBEC Code", response => response?.NbecCodeValues ?? [], (request, value) => request.NbecCode = value, request => request.NbecCode),
        new("Site Component Code", response => response?.SiteComponentCodeValues ?? [], (request, value) => request.SiteComponentCode = value, request => request.SiteComponentCode)
        {
            Subfields =
            [
                new("Realm", response => response?.RealmCodeValues ?? [], (request, value) => request.RealmCode = value, request => request.RealmCode),
                new("Group", response => response?.GroupCodeValues ?? [], (request, value) => request.GroupCode = value, request => request.GroupCode),
                new("Class", response => response?.ClassCodeValues ?? [], (request, value) => request.ClassCode = value, request => request.ClassCode),
                new("Association", response => response?.AssociationCodeValues ?? [], (request, value) => request.AssociationCode = value, request => request.AssociationCode),
                new("Subclass", response => response?.SubclassCodeValues ?? [], (request, value) => request.SubclassCode = value, request => request.SubclassCode),
            ],
        },
        new("Site Series Name", response => response?.SiteSeriesNameValues ?? [], (request, value) => request.SiteSeriesName = value, request => request.SiteSeriesName),
        new SelectFieldBoolean("Forested", response => response?.ForestedValues ?? [], (request, value) => request.Forested = value, request => request.Forested),
        new("Ecosystem Type", response => response?.EcosystemTypeValues ?? [], (request, value) => request.EcosystemType = value, request => request.EcosystemType),
        new("Ecosystem Subtype", response => response?.EcosystemSubtypeValues ?? [], (request, value) => request.EcosystemSubtype = value, request => request.EcosystemSubtype),
        new("Kind", response => response?.KindTypeValues ?? [], (request, value) => request.KindType = value, request => request.KindType),
        new("Source", response => response?.SourceValues ?? [], (request, value) => request.Source = value, request => request.Source),
        new SelectFieldBoolean("Approved", response => response?.ApprovedValues ?? [], (request, value) => request.Approved = value, request => request.Approved),
    ];

    private List<List<OutputField>> OutputFieldGroups { get; } =
    [
        [
            new("BGC Label", code => code?.BgcCode)
            {
                Size = OutputFieldSize.Large,
                Subfields =
                [
                    new("Zone", code => code?.ZoneCode),
                    new("Subzone", code => code?.SubzoneCode),
                    new("Variant", code => code?.VariantCode),
                    new("Phase", code => code?.PhaseCode),
                ],
            },
        ],
        [
            new("Ecosystem Code", code => code?.EcosystemCode)
            {
                Size = OutputFieldSize.Large,
                Subfields =
                [
                    new("Map Code", code => code?.MapCode),
                    new("Site Series", code => code?.SiteSeriesCode),
                    new("SS Phase", code => code?.SsPhaseCode),
                    new("Seral", code => code?.SeralCode),
                    new("Variation", code => code?.VariationCode),
                ],
            },
        ],
        [
            new("nBEC Code", code => code?.NbecCode),
            new("Site Component Code", code => code?.SiteComponentCode)
            {
                Subfields =
                [
                    new("Realm", code => code?.RealmCode),
                    new("Group", code => code?.GroupCode),
                    new("Class", code => code?.ClassCode),
                    new("Association", code => code?.AssociationCode),
                    new("Subclass", code => code?.SubclassCode),
                ],
            },
        ],
        [
            new("Site Series Name", code => code?.SiteSeriesName) { Size = OutputFieldSize.Large },
            new("Forested", code => code?.Forested.ToString()) { Size = OutputFieldSize.Small },
            new("Ecosystem Type", code => code?.EcosystemType) { Size = OutputFieldSize.Small },
            new("Ecosystem Subtype", code => code?.EcosystemSubtype) { Size = OutputFieldSize.Small },
            new("Kind Type", code => code?.KindType) { Size = OutputFieldSize.Small },
            new("Source", code => code?.Source) { Size = OutputFieldSize.Small, StartNewRow = true },
            new("Date Added", code => code?.DateAdded.ToString("yyyy-MM-dd")) { Size = OutputFieldSize.Small },
            new("Approved", code => code?.Approved.ToString()) { Size = OutputFieldSize.Small },
        ],
    ];

    private bool FiltersAreEmpty => SelectFields.All(x => x.IsEmpty);

    protected override async Task OnInitializedAsync()
    {
        await FilterResultsAsync();
        await base.OnInitializedAsync();
    }

    private async Task FilterResultsAsync()
    {
        if (FilterHistory.Count > 0 && FiltersAreEmpty)
        {
            FilterResponse = FilterHistory.Last().Response;
        }
        else
        {
            FilterBcgEcoCodesRequest request = new();
            foreach (SelectField field in SelectFields)
            {
                field.PopulateRequest(request, Logger);
            }

            await GetFilterResponseAsync(request);
        }
    }

    private async Task GetFilterResponseAsync(FilterBcgEcoCodesRequest request)
    {
        try
        {
            Loading = true;
            FilterResponse = await ClassificationApi.FilterBgcEcoCodes(request);
            FilterHistory.Push(new() { Request = request, Response = FilterResponse });
        }
        finally
        {
            Loading = false;
            StateHasChanged();
        }
    }

    private void UpdateInputFields(FilterBcgEcoCodesResponse? response)
    {
        foreach (SelectField field in SelectFields)
        {
            field.UpdateFilteredValues(response, Logger);
        }
    }

    private void UpdateOutputFields(FilterBcgEcoCodesResponse? response)
    {
        foreach (OutputField field in OutputFieldGroups.SelectMany(group => group))
        {
            field.SetValues(response?.UniqueResult);
        }
    }

    private void RestoreFilter(FilterBcgEcoCodes filter)
    {
        foreach (SelectField field in SelectFields)
        {
            field.UpdateSelectedValue(filter.Request, Logger);
        }

        foreach (SelectField field in SelectFields)
        {
            field.UpdateFilteredValues(filter.Response, Logger);
        }

        FilterResponse = filter.Response;
    }

    private void ClearAllFilters()
    {
        Logger.LogInformation("Clearing all filters");

        FilterBcgEcoCodes initialFilter = FilterHistory.Last();
        FilterHistory.Clear();
        RestoreFilter(initialFilter);
        FilterHistory.Push(initialFilter);
    }

    private void RestorePreviousFilter()
    {
        FilterHistory.Pop();
        RestoreFilter(FilterHistory.Peek());
    }

    private record FilterBcgEcoCodes
    {
        public required FilterBcgEcoCodesRequest Request { get; init; }
        public required FilterBcgEcoCodesResponse Response { get; init; }
    }

}
