@inherits ComponentBase
@inject ILogger<SelectFieldComponent> Logger

<div class="d-grid gap-2">
    <div class="row g-2">
        <label for="@Field.InputId"
               class="col-6 col-form-label col-form-label-sm">@Field.Label</label>
        <div class="col-6">
            <select @bind:get="@Field.SelectedValue"
                    @bind:set="ChangeValueAsync(Field)"
                    id="@Field.InputId"
                    class="form-select form-select-sm"
                    disabled="@(Deactivated || Field.FilteredValues.Count < 2)">
                <option value="@SelectField.UnselectedValue"></option>
                @foreach ((string value, string displayValue) in Field.FilteredValues)
                {
                    <option value="@value"
                            @key="@value">@(displayValue == string.Empty ? "-" : displayValue)</option>
                }
            </select>
        </div>
    </div>
    @if (Field.Subfields.Any())
    {
        <div class="row g-2 justify-content-end">
            @foreach (SelectField subfield in Field.Subfields)
            {
                <div class="col col-6 col-md">
                    <div class="form-floating">
                        <select @bind:get="@subfield.SelectedValue"
                                @bind:set="ChangeValueAsync(subfield)"
                                id="@subfield.InputId"
                                class="form-select"
                                disabled="@(Deactivated || subfield.FilteredValues.Count < 2)">
                            <option value="@SelectField.UnselectedValue"></option>
                            @foreach ((string value, string displayValue) in subfield.FilteredValues)
                            {
                                <option value="@value"
                                        @key="@value">@(displayValue == string.Empty ? "-" : displayValue)</option>
                            }
                        </select>
                        <label for="@subfield.InputId">@subfield.Label</label>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {

    [Parameter]
    public required SelectField Field { get; set; }

    [Parameter]
    public required EventCallback OnSelectCallback { get; set; }

    [Parameter]
    public required bool Deactivated { get; set; }

    private Func<string, Task> ChangeValueAsync(SelectField field)
    {
        return value =>
        {
            field.UpdateSelectedValue(value, Logger);
            return OnSelectCallback.InvokeAsync();
        };
    }

    private async Task ClearSelectedValuesAsync()
    {
        Logger.LogInformation("Clearing filters for {Label}", Field.Label);
        Field.ClearSelectedValues(Logger);
        await OnSelectCallback.InvokeAsync();
    }

}
